#!/home/yar2/o2py/bin/python -u
from __future__ import print_function, division
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-z', action='store_true', default=False,
        help='treat input numbers as Z scores for a one-sided test')
parser.add_argument('-z2', action='store_true', default=False,
        help='tread input numbers as Z scores for a two-sided test')
parser.add_argument('-header', action='store_true', default=False,
        help='treat first line of each input stream as header')
parser.add_argument('-t', action='store_true', default=False,
        help='terse. print just number of significant hits')
parser.add_argument('--threshold', type=float, default=0.05)
parser.add_argument('--col', default=1,
        help='column to consider for fdr computation. Default is first column')
parser.add_argument('--strat', default=None,
        help='column to define strata for stratified FDR. Default is None')
parser.add_argument('files', nargs='*', default=['/dev/stdin'])
args = parser.parse_args()

from scipy import stats
import numpy as np
import pandas as pd
import statutils.sig as sig
from sys import stdout

# read in data
df = pd.DataFrame()
for name in args.files:
    f = open(name)
    df = df.append(
            pd.read_csv(f, sep='\t', header=(None if not args.header else 0)))
if not args.header:
    args.col = df.columns[int(args.col)-1]
    args.strat = df.columns[int(args.strat)-1]

values = df[args.col].values.astype(float)
if args.strat is not None:
    stratvalues = df[args.strat].values
else:
    stratvalues = np.ones(len(values))

# transform to p-values if necessary
if args.z:
    p = stats.norm.sf(values)
elif args.z2:
    p = stats.chi2.sf(values**2, 1)
else:
    p = values

sigrows = pd.concat([
        sig.sigrows(df[stratvalues == l], p[stratvalues == l],
            threshold=args.threshold, st=False)
        for l in np.unique(stratvalues)
        ], axis=0)

if args.t:
    print(len(sigrows))
else:
    sigrows.to_csv(stdout, sep='\t', index=False)
